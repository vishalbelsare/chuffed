/*
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

%option reentrant
%option bison-bridge
%option noyywrap
%option yylineno
%option never-interactive

%{

#ifdef WIN32
#define strdup _strdup
#endif

void yyerror(void*, const char*);
#define yyerror(s) yyerror(yyextra, s)

#include "chuffed/flatzinc/flatzinc.h"
#include "chuffed/flatzinc/generated_parser/parser.tab.h"

const char* stringbuf;
int stringbuflen;
int stringbufpos;

int yy_input_proc(char* buf, int size, yyscan_t yyscanner);
#define YY_INPUT(buf, result, max_size) \
  result = yy_input_proc(buf, max_size, yyscanner);
%}

%%

\n                { /*yylineno++;*/ /* ignore EOL */ }
[ \t\r]           { /* ignore whitespace */ }
%.*               { /* ignore comments */ }

"true"            { yylval->iValue = 1; return BOOL_LIT; }
"false"           { yylval->iValue = 0; return BOOL_LIT; }
-?[0-9]+          { yylval->iValue = atoi(yytext); return INT_LIT; }
-?0x[0-9A-Fa-f]+  { yylval->iValue = atoi(yytext); return INT_LIT; }
-?0o[0-7]+        { yylval->iValue = atoi(yytext); return INT_LIT; }
-?[0-9]+\.[0-9]+  { yylval->dValue = atof(yytext); return FLOAT_LIT; }
-?[0-9]+\.[0-9]+[Ee][+-]?[0-9]+  { yylval->dValue = atof(yytext); return FLOAT_LIT; }
-?[0-9]+[Ee][+-]?[0-9]+  { yylval->dValue = atof(yytext); return FLOAT_LIT; }
[=:;{}(),\[\]\.]    { return *yytext; }
\.\.              { return DOTDOT; }
::                { return COLONCOLON; }
"annotation"      { return ANNOTATION; }
"any"             { return ANY; }
"array"           { return ARRAY; }
"bool"            { return BOOLTOK; }
"case"            { return CASE; }
"constraint"      { return CONSTRAINT; }
"default"         { return DEFAULT; }
"else"            { return ELSE; }
"elseif"          { return ELSEIF; }
"endif"           { return ENDIF; }
"enum"            { return ENUM; }
"float"           { return FLOATTOK; }
"function"        { return FUNCTION; }
"if"              { return IF; }
"include"         { return INCLUDE; }
"int"             { return INTTOK; }
"let"             { return LET; }
"maximize"        { yylval->bValue = false; return MAXIMIZE; }
"minimize"        { yylval->bValue = true; return MINIMIZE; }
"of"              { return OF; }
"satisfy"         { return SATISFY; }
"output"          { return OUTPUT; }
"par"             { yylval->bValue = false; return PAR; }
"predicate"       { return PREDICATE; }
"record"          { return RECORD; }
"set"             { return SET; }
"show_cond"       { return SHOWCOND; }
"show"            { return SHOW; }
"solve"           { return SOLVE; }
"string"          { return STRING; }
"test"            { return TEST; }
"then"            { return THEN; }
"tuple"           { return TUPLE; }
"type"            { return TYPE; }
"var"             { yylval->bValue = true; return VAR; }
"variant_record"  { return VARIANT_RECORD; }
"where"           { return WHERE; }
[A-Za-z][A-Za-z0-9_]* { yylval->sValue = strdup(yytext); return ID; }
\"[^"\n]*\"       {
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0; 
                    return STRING_LIT; }
.                 { yyerror("Unknown character"); }
%%
int yy_input_proc(char* buf, int size, yyscan_t yyscanner) {
  FlatZinc::ParserState* parm = 
    static_cast<FlatZinc::ParserState*>(yyget_extra(yyscanner));
  return parm->fillBuffer(buf, size);
}
